package chain

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"github.com/zhangsifeng92/geos/chain/types"
	"github.com/zhangsifeng92/geos/common"
	"github.com/zhangsifeng92/geos/crypto/rlp"
	"os"
	"testing"
)

func TestBlockTest(t *testing.T) {

	t.Run("", func(t *testing.T) {

		blockBytes := []byte{0x9f, 0x1, 0x0, 0x0, 0x7, 0x66, 0x4f, 0xad, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0xec, 0x3b, 0x3f, 0x3a, 0xe, 0x67, 0x96, 0xc6, 0xc5, 0x0, 0x43, 0xd1, 0x47, 0xac, 0xe2, 0x31, 0x93, 0xa6, 0x6e, 0x4b, 0x88, 0x55, 0x7b, 0x81, 0x50, 0x93, 0xa5, 0xf6, 0x3a, 0x1c, 0x77, 0x50, 0xf6, 0x33, 0x7f, 0x9e, 0x46, 0x91, 0xa4, 0xca, 0x2e, 0x32, 0x55, 0x48, 0x7, 0x2c, 0xc2, 0x82, 0x7a, 0xae, 0x7f, 0xba, 0x5f, 0xaa, 0x17, 0xb0, 0x38, 0xd5, 0xf9, 0xb, 0x44, 0x48, 0xb9, 0x47, 0x64, 0x11, 0x34, 0x75, 0x7b, 0xc0, 0x15, 0x27, 0xeb, 0x52, 0x14, 0x3b, 0x4d, 0x61, 0xf9, 0xd6, 0x49, 0x24, 0xf2, 0x4b, 0x7f, 0x19, 0x20, 0x7c, 0x2f, 0x46, 0xc2, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x42, 0x22, 0x7c, 0xd4, 0x29, 0x7, 0x34, 0x3d, 0x90, 0x3d, 0xd2, 0x6a, 0x10, 0xbb, 0x41, 0x93, 0x57, 0x4c, 0xf, 0xad, 0xec, 0x90, 0x27, 0x66, 0xa9, 0xe5, 0x4f, 0x4c, 0xde, 0xfd, 0x3, 0xc3, 0x25, 0x3f, 0x7d, 0x66, 0x77, 0x1e, 0x14, 0xf3, 0x5f, 0x9c, 0xd9, 0xc, 0xcf, 0xe9, 0x6a, 0x5b, 0x3d, 0xfa, 0x80, 0x8f, 0xf, 0x6c, 0xea, 0xf7, 0x9b, 0xdf, 0x2f, 0x74, 0xab, 0x6f, 0x47, 0x9e, 0x1, 0x0, 0x2d, 0x1, 0x0, 0x0, 0x19, 0x1, 0x1, 0x0, 0x20, 0x60, 0x67, 0x3d, 0x9f, 0x33, 0xa8, 0x55, 0x8e, 0x1b, 0xd5, 0x42, 0x96, 0x79, 0xbc, 0xee, 0x2a, 0x51, 0x26, 0xa1, 0x99, 0x9a, 0x38, 0x73, 0x81, 0x6e, 0xa3, 0x6d, 0xe4, 0xdd, 0x44, 0xae, 0xbb, 0x39, 0x4f, 0x15, 0xfa, 0xd0, 0x6f, 0xdb, 0x6a, 0x6, 0xf8, 0xab, 0x69, 0x53, 0x9c, 0x6e, 0xcd, 0x8d, 0xd, 0xda, 0x32, 0x4f, 0x64, 0x91, 0x3a, 0xbb, 0x13, 0xc2, 0x7f, 0x84, 0x24, 0x94, 0xf4, 0x0, 0x0, 0x98, 0x1, 0x50, 0xeb, 0xc3, 0x5b, 0x4, 0x0, 0x9e, 0xd5, 0x72, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x40, 0x9e, 0x9a, 0x22, 0x64, 0xb8, 0x9a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x0, 0x0, 0x0, 0xa8, 0xed, 0x32, 0x32, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x5, 0xa3, 0xe1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x72, 0x47, 0xd0, 0x91, 0xa5, 0xb0, 0x20, 0xe8, 0x74, 0x50, 0xcf, 0xf9, 0x1, 0x4e, 0x38, 0xc0, 0xf4, 0x16, 0x8b, 0xca, 0xd5, 0x99, 0xb4, 0x5d, 0x1d, 0xfa, 0xa7, 0x19, 0x37, 0xe6, 0x35, 0x16, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x72, 0x47, 0xd0, 0x91, 0xa5, 0xb0, 0x20, 0xe8, 0x74, 0x50, 0xcf, 0xf9, 0x1, 0x4e, 0x38, 0xc0, 0xf4, 0x16, 0x8b, 0xca, 0xd5, 0x99, 0xb4, 0x5d, 0x1d, 0xfa, 0xa7, 0x19, 0x37, 0xe6, 0x35, 0x16, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0}
		signedBlock := types.SignedBlock{}
		rlp.DecodeBytes(blockBytes, &signedBlock)
		signedBlock.Confirmed = uint16(1)

		gs := types.GenesisState{
			InitialTimestamp: common.Now(),
		}

		dataDir := "blocks"
		os.RemoveAll(dataDir)
		blockLog := NewBlockLog(dataDir)
		blockLog.ResetToGenesis(&gs, &signedBlock)
		blockLog.flush()

		blockLog = NewBlockLog(dataDir)
		for i := 2; i < 1000; i++ {
			signedBlock.Confirmed = uint16(i)
			pos := blockLog.Append(&signedBlock)
			fmt.Println(pos)
		}

		block := blockLog.ReadBlockByNum(100)
		assert.Equal(t, block.Confirmed, uint16(100))

		blockLog.flush()
		ExtractGenesisState(dataDir)
		//gsRead := blockLog.ExtractGenesisState(dataDir)
		//assert.Equal(t, gs.EosioRootKey, gsRead.EosioRootKey)

		os.RemoveAll(dataDir)

	})

}
