// Code generated by gotemplate. DO NOT EDIT.

package exception

import (
	"bytes"
	"encoding/json"
	"reflect"
	"strconv"

	"github.com/zhangsifeng92/geos/log"
)

// template type Exception(PARENT,CODE,WHAT)

var ChainTypeExceptionName = reflect.TypeOf(ChainTypeException{}).Name()

type ChainTypeException struct {
	_ChainException
	Elog log.Messages
}

func NewChainTypeException(parent _ChainException, message log.Message) *ChainTypeException {
	return &ChainTypeException{parent, log.Messages{message}}
}

func (e ChainTypeException) Code() int64 {
	return 3010000
}

func (e ChainTypeException) Name() string {
	return ChainTypeExceptionName
}

func (e ChainTypeException) What() string {
	return "chain type exception"
}

func (e *ChainTypeException) AppendLog(l log.Message) {
	e.Elog = append(e.Elog, l)
}

func (e ChainTypeException) GetLog() log.Messages {
	return e.Elog
}

func (e ChainTypeException) TopMessage() string {
	for _, l := range e.Elog {
		if msg := l.GetMessage(); len(msg) > 0 {
			return msg
		}
	}
	return e.String()
}

func (e ChainTypeException) DetailMessage() string {
	var buffer bytes.Buffer
	buffer.WriteString(strconv.Itoa(int(e.Code())))
	buffer.WriteByte(' ')
	buffer.WriteString(e.Name())
	buffer.Write([]byte{':', ' '})
	buffer.WriteString(e.What())
	buffer.WriteByte('\n')
	for _, l := range e.Elog {
		buffer.WriteByte('[')
		buffer.WriteString(l.GetMessage())
		buffer.Write([]byte{']', ' '})
		buffer.WriteString(l.GetContext().String())
		buffer.WriteByte('\n')
	}
	return buffer.String()
}

func (e ChainTypeException) String() string {
	return e.DetailMessage()
}

func (e ChainTypeException) MarshalJSON() ([]byte, error) {
	type Exception struct {
		Code int64  `json:"code"`
		Name string `json:"name"`
		What string `json:"what"`
	}

	except := Exception{
		Code: 3010000,
		Name: ChainTypeExceptionName,
		What: "chain type exception",
	}

	return json.Marshal(except)
}

func (e ChainTypeException) Callback(f interface{}) bool {
	switch callback := f.(type) {
	case func(*ChainTypeException):
		callback(&e)
		return true
	case func(ChainTypeException):
		callback(e)
		return true
	default:
		return false
	}
}
